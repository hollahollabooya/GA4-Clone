package templates

import "ga4ct/data"
import "fmt"

templ Index(table *data.Table) {
    <html>
    <head>
        <title>Website Index</title>
        <link href="/assets/output.css" rel="stylesheet">
        // use charts.js cdn for now
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    </head>
    <body>
        @reportLayout(table)
    </body>
    </html>
}

templ reportLayout(table *data.Table) {
    // <div id="reports-container" class="container mx-auto columns-2">
    //     @lineChart(lineChartData)
    //     @barChart(barChartData)
    // </div>
    <div id="events-table-container" class="container mx-auto columns-1">
        @eventsTable(table)
    </div>
}

// templ lineChart(data *data.Table) {
//     <div id="line-chart">
//         <canvas id="line-chart"></canvas>
//         // Use this to pass down the data to the client
//         // https://templ.guide/syntax-and-usage/script-templates#pass-server-side-data-to-the-client-in-a-script-element

//         @templ.JSONScript("line-chart-data", *data)
//         <script>
//             let data = JSON.parse(document.getElementById("line-chart-data").textContent);
//             let ctx = document.getElementById("line-chart")

//             new Chart (ctx, {
//                 type: 'line',
//                 data: {
//                     datasets: data.Rows
//                 },
//                 options: {
//                     parsing: {
//                         xAxisKey: 'Dimensions[0]',
//                         yAxisKey: 'Measures[0]'
//                     }
//                 }
//             });
//         </script>
//     </div>
// }

// templ barChart(data *data.Table) {
//     <div id="bar-chart">
//         @templ.JSONScript("bar-chart-data", *data)
//         <p>"A bar chart will go here"</p>
//     </div>
// }

templ eventsTable(data *data.Table) {
    <table id="table" border="1">
        <tr>
        for _, dimensionHeader := range data.DimensionHeaders {
            <th>{ dimensionHeader.Label() }</th>
        }
        for _, measureHeader := range data.MeasureHeaders {
            <th>{ measureHeader.Label() }</th>
        }
        </tr>
        for _, row := range data.Rows {
        <tr>
            for _, dimension := range row.Dimensions {
                <td>{ dimension }</td>
            }
            for _, measure := range row.Measures {
                <td>{ fmt.Sprintf("%f", measure) }</td>
            }
        </tr>
        }
    </table>
}